/*
Defaults to unset. Cross-orchestrator way to add additional mounts to a container.
Each value is a string that accepts the same values as the Docker CLI
--mount flag .
Environment and pre-defined variables may be referenced in the value.
For example: "mounts": [{ "source": "dind-var-lib-docker", "target": "/var/lib/docker", "type": "volume" }]
*/
{
  "name": "1_15-spec_mounts",
  "image": "ubuntu:latest",

  "mounts": [{
    "source": "${localEnv:HOME}",
    "target": "/hostHome",
    "type": "bind"
  }, {
    "source": "mount",
    "target": "/volume/mount",
    "type": "volume"
  }]
}
/*
run
mkdir ~/bind && touch ~/bind/bindfile
for test
The choice between bind and volume depends on your usage scenario.
If you need to work with files locally on your machine and have those changes synchronized w
ith the container, a bind mount is typically the better choice.

If you want to persist data across container runs and there's no need to store it on
the host machine, a volume might be a more suitable option.
*/
