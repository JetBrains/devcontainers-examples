/*
Indicates the type of shell to use to “probe” for user environment variables to include in devcontainer.json supporting
services’ / tools’ processes: none, interactiveShell, loginShell, or loginInteractiveShell (default).

The specific shell used is based on the default shell for the user (typically bash).
For example, bash interactive shells will typically include variables set in /etc/bash.bashrc and
~/.bashrc while login shells usually include variables from /etc/profile and ~/.profile.
Setting this property to loginInteractiveShell will get variables from all four files.
*/
{
  "name": "1_8-spec_userEnvProbe",
  "image": "ubuntu:latest",
  "userEnvProbe": "loginInteractiveShell",
  "runArgs": ["--env", "USERPATH=${localEnv:PATH}"]
}
/*
Not implemented now, planned
//TODO: IDEA-337387
Use
echo "USERPATH"
for check.

UserEnvProbe options:
none:
This mode does not collect any environment variables from the local system.
The environment variables in the container will be limited to those defined directly in the container or in
devcontainer.json. Local environment variables will not be passed into the container.

interactiveShell:
Collects environment variables from an interactive shell without performing a login procedure.
Environment variables that are typically initialized when an interactive shell starts (e.g., .bashrc in Bash)
will be available in the container. However, variables initialized in login scripts
(e.g., .bash_profile, .bash_login, .profile) will not be loaded.

loginShell:
Uses a login shell to gather environment variables.
Environment variables initialized during the login process will be loaded into the container.
This includes scripts such as .bash_profile, .bash_login, .profile in Bash. This mode is more suitable for
situations where a full set of environment variables initialized at login is required.

loginInteractiveShell:
Combines both of the previous strategies, using an interactive login shell.
This is the most comprehensive method of collecting environment variables,
including both variables initialized at login and those during the start of an interactive shell.
It is suitable for situations where it is important to have a complete set of environment variables
available both in the local system and in the container.
*/
